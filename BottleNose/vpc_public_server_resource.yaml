# Check for TODO
Resources:
  # VPC
  NHTLABVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: NHT-LAB-VPC
  # Subnet
  NHTLABVPCSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref NHTLABVPC
      CidrBlock: 172.31.0.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: NHT-LAB-VPC-Subnet-a
  # IGW
  NHTLABIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: NHTLABIGW
  NHTLABIGWAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref NHTLABVPC
      InternetGatewayId: !Ref NHTLABIGW
  # RouteTable
  NHTLABRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NHTLABVPC
      Tags:
        - Key: Name
          Value: NHTLABRouteTable
  NHTLABRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: NHTLABIGWAttach
    Properties:
      RouteTableId: !Ref NHTLABRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NHTLABIGW
  NHTLABSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref NHTLABVPCSubnet
      RouteTableId: !Ref NHTLABRouteTable
  # NetworkACL
  NHTLABNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NHTLABVPC
      Tags:
        - Key: Name
          Value: NHTLABNetworkAcl
  NHTLABInboundIPV4NetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NHTLABNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NHTLABOutBoundIPV4NetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NHTLABNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NHTLABSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref NHTLABVPCSubnet
      NetworkAclId: !Ref NHTLABNetworkAcl
  # SecurityGroup
  NHTLABSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: NHTLABSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: NHTLABSGIngressRule
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: NHTLABSGIngressRule
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: NHTLABSGEgressRule
          IpProtocol: '-1'
      VpcId: !Ref NHTLABVPC
      Tags:
        - Key: Name
          Value: NHTLABSG
  # EC2 Server KeyPair
  NHTLABEC2KeyPair:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt NHTLABEC2KeyPairFunction.Arn
      challengeId: !Ref ChallengeIdParameter
      user: !Ref UserAliasParameter
      attemptId: !Ref AttemptIdParameter
  NHTLABEC2KeyPairFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: warbase-us-east-1
        S3Key: keypaircode/customkeypair.zip
      Handler: !Join 
        - ''
        - - lambda_function
          - .lambda_handler
      Runtime: python3.6
      Timeout: '30'
      Role: !GetAtt NHTLABLambdaExecutionRole.Arn
  NHTLABLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
  # EC2 Server Role (Instance Profile)
  NHTLABSSMRoleforEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
  NHTLABSSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NHTLABSSMRoleforEC2
  # EIP for server
  serverNHTLABEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: serverNHTLABEIP
  serverNHTEIPAllocation:
    Type: 'AWS::EC2::EIPAssociation'
    DependsOn: NHTLABIGWAttach
    Properties:
      AllocationId: !GetAtt 
        - serverNHTLABEIP
        - AllocationId
      InstanceId: !Ref MyEC2server
  # EC2 server
  MyEC2server:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00eb20669e0990cb4
      # TODO Uncomment
      # ImageId: !FindInMap [AWSRegion2AMI, !Ref "AWS::Region", AMI]
      # KeyName: !GetAtt NHTLABEC2KeyPair.KeyName
      # TODO Remove
      KeyName: MyNorthVirginiaKP
      IamInstanceProfile: !Ref NHTLABSSMInstanceProfile
      SubnetId: !Ref NHTLABVPCSubnet
      AvailabilityZone: us-east-1a
      SecurityGroupIds:
        - !Ref NHTLABSG
      Tags:
        - Key: Name
          Value: MyEC2server
        # TODO Uncomment
        # - Key: UserAlias
        #   Value: !Ref UserAliasParameter
        # - Key: AttemptID
        #   Value: !Ref AttemptIdParameter
